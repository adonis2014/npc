/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package code.core.npc.rpc;  

import java.util.concurrent.atomic.AtomicInteger;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class HandshakeRequest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"HandshakeRequest\",\"namespace\":\"code.core.npc.rpc\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"int\"]},{\"name\":\"timeout\",\"type\":[\"null\",\"int\"]},{\"name\":\"protocolType\",\"type\":[\"null\",\"int\"]},{\"name\":\"targetInstanceName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"methodName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.Integer id;
  @Deprecated public java.lang.Integer timeout;
  @Deprecated public java.lang.Integer protocolType;
  @Deprecated public java.lang.String targetInstanceName;
  @Deprecated public java.lang.String methodName;
  
  private static AtomicInteger incId = new AtomicInteger(0);

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public HandshakeRequest() {}

  public HandshakeRequest(java.lang.Integer timeout, java.lang.Integer protocolType, java.lang.String targetInstanceName, java.lang.String methodName) {
    this(incId.incrementAndGet(), timeout, protocolType, targetInstanceName, methodName);
  }
  /**
   * All-args constructor.
   */
  public HandshakeRequest(java.lang.Integer id, java.lang.Integer timeout, java.lang.Integer protocolType, java.lang.String targetInstanceName, java.lang.String methodName) {
    this.id = id;
    this.timeout = timeout;
    this.protocolType = protocolType;
    this.targetInstanceName = targetInstanceName;
    this.methodName = methodName;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return timeout;
    case 2: return protocolType;
    case 3: return targetInstanceName;
    case 4: return methodName;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: timeout = (java.lang.Integer)value$; break;
    case 2: protocolType = (java.lang.Integer)value$; break;
    case 3: targetInstanceName = (java.lang.String)value$; break;
    case 4: methodName = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.Integer getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'timeout' field.
   */
  public java.lang.Integer getTimeout() {
    return timeout;
  }

  /**
   * Sets the value of the 'timeout' field.
   * @param value the value to set.
   */
  public void setTimeout(java.lang.Integer value) {
    this.timeout = value;
  }

  /**
   * Gets the value of the 'protocolType' field.
   */
  public java.lang.Integer getProtocolType() {
    return protocolType;
  }

  /**
   * Sets the value of the 'protocolType' field.
   * @param value the value to set.
   */
  public void setProtocolType(java.lang.Integer value) {
    this.protocolType = value;
  }

  /**
   * Gets the value of the 'targetInstanceName' field.
   */
  public java.lang.String getTargetInstanceName() {
    return targetInstanceName;
  }

  /**
   * Sets the value of the 'targetInstanceName' field.
   * @param value the value to set.
   */
  public void setTargetInstanceName(java.lang.String value) {
    this.targetInstanceName = value;
  }

  /**
   * Gets the value of the 'methodName' field.
   */
  public java.lang.String getMethodName() {
    return methodName;
  }

  /**
   * Sets the value of the 'methodName' field.
   * @param value the value to set.
   */
  public void setMethodName(java.lang.String value) {
    this.methodName = value;
  }

  /** Creates a new HandshakeRequest RecordBuilder */
  public static code.core.npc.rpc.HandshakeRequest.Builder newBuilder() {
    return new code.core.npc.rpc.HandshakeRequest.Builder();
  }
  
  /** Creates a new HandshakeRequest RecordBuilder by copying an existing Builder */
  public static code.core.npc.rpc.HandshakeRequest.Builder newBuilder(code.core.npc.rpc.HandshakeRequest.Builder other) {
    return new code.core.npc.rpc.HandshakeRequest.Builder(other);
  }
  
  /** Creates a new HandshakeRequest RecordBuilder by copying an existing HandshakeRequest instance */
  public static code.core.npc.rpc.HandshakeRequest.Builder newBuilder(code.core.npc.rpc.HandshakeRequest other) {
    return new code.core.npc.rpc.HandshakeRequest.Builder(other);
  }
  
  /**
   * RecordBuilder for HandshakeRequest instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<HandshakeRequest>
    implements org.apache.avro.data.RecordBuilder<HandshakeRequest> {

    private java.lang.Integer id;
    private java.lang.Integer timeout;
    private java.lang.Integer protocolType;
    private java.lang.String targetInstanceName;
    private java.lang.String methodName;

    /** Creates a new Builder */
    private Builder() {
      super(code.core.npc.rpc.HandshakeRequest.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(code.core.npc.rpc.HandshakeRequest.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timeout)) {
        this.timeout = data().deepCopy(fields()[1].schema(), other.timeout);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.protocolType)) {
        this.protocolType = data().deepCopy(fields()[2].schema(), other.protocolType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.targetInstanceName)) {
        this.targetInstanceName = data().deepCopy(fields()[3].schema(), other.targetInstanceName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.methodName)) {
        this.methodName = data().deepCopy(fields()[4].schema(), other.methodName);
        fieldSetFlags()[4] = true;
      }
    }
    
    /** Creates a Builder by copying an existing HandshakeRequest instance */
    private Builder(code.core.npc.rpc.HandshakeRequest other) {
            super(code.core.npc.rpc.HandshakeRequest.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timeout)) {
        this.timeout = data().deepCopy(fields()[1].schema(), other.timeout);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.protocolType)) {
        this.protocolType = data().deepCopy(fields()[2].schema(), other.protocolType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.targetInstanceName)) {
        this.targetInstanceName = data().deepCopy(fields()[3].schema(), other.targetInstanceName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.methodName)) {
        this.methodName = data().deepCopy(fields()[4].schema(), other.methodName);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.Integer getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public code.core.npc.rpc.HandshakeRequest.Builder setId(java.lang.Integer value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public code.core.npc.rpc.HandshakeRequest.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'timeout' field */
    public java.lang.Integer getTimeout() {
      return timeout;
    }
    
    /** Sets the value of the 'timeout' field */
    public code.core.npc.rpc.HandshakeRequest.Builder setTimeout(java.lang.Integer value) {
      validate(fields()[1], value);
      this.timeout = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'timeout' field has been set */
    public boolean hasTimeout() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'timeout' field */
    public code.core.npc.rpc.HandshakeRequest.Builder clearTimeout() {
      timeout = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'protocolType' field */
    public java.lang.Integer getProtocolType() {
      return protocolType;
    }
    
    /** Sets the value of the 'protocolType' field */
    public code.core.npc.rpc.HandshakeRequest.Builder setProtocolType(java.lang.Integer value) {
      validate(fields()[2], value);
      this.protocolType = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'protocolType' field has been set */
    public boolean hasProtocolType() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'protocolType' field */
    public code.core.npc.rpc.HandshakeRequest.Builder clearProtocolType() {
      protocolType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'targetInstanceName' field */
    public java.lang.String getTargetInstanceName() {
      return targetInstanceName;
    }
    
    /** Sets the value of the 'targetInstanceName' field */
    public code.core.npc.rpc.HandshakeRequest.Builder setTargetInstanceName(java.lang.String value) {
      validate(fields()[3], value);
      this.targetInstanceName = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'targetInstanceName' field has been set */
    public boolean hasTargetInstanceName() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'targetInstanceName' field */
    public code.core.npc.rpc.HandshakeRequest.Builder clearTargetInstanceName() {
      targetInstanceName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'methodName' field */
    public java.lang.String getMethodName() {
      return methodName;
    }
    
    /** Sets the value of the 'methodName' field */
    public code.core.npc.rpc.HandshakeRequest.Builder setMethodName(java.lang.String value) {
      validate(fields()[4], value);
      this.methodName = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'methodName' field has been set */
    public boolean hasMethodName() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'methodName' field */
    public code.core.npc.rpc.HandshakeRequest.Builder clearMethodName() {
      methodName = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public HandshakeRequest build() {
      try {
        HandshakeRequest record = new HandshakeRequest();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.timeout = fieldSetFlags()[1] ? this.timeout : (java.lang.Integer) defaultValue(fields()[1]);
        record.protocolType = fieldSetFlags()[2] ? this.protocolType : (java.lang.Integer) defaultValue(fields()[2]);
        record.targetInstanceName = fieldSetFlags()[3] ? this.targetInstanceName : (java.lang.String) defaultValue(fields()[3]);
        record.methodName = fieldSetFlags()[4] ? this.methodName : (java.lang.String) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}