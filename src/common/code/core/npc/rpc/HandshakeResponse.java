/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package code.core.npc.rpc;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class HandshakeResponse extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"HandshakeResponse\",\"namespace\":\"code.core.npc.rpc\",\"fields\":[{\"name\":\"requestId\",\"type\":\"int\"},{\"name\":\"protocolType\",\"type\":\"int\"},{\"name\":\"isError\",\"type\":\"boolean\",\"default\":false},{\"name\":\"response\",\"type\":[\"null\",\"bytes\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int requestId;
  @Deprecated public int protocolType;
  @Deprecated public boolean isError;
  @Deprecated public java.nio.ByteBuffer response;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public HandshakeResponse() {}
  
  public HandshakeResponse(java.lang.Integer requestId, java.lang.Integer protocolType) {
    this.requestId = requestId;
    this.protocolType = protocolType;
  }

  /**
   * All-args constructor.
   */
  public HandshakeResponse(java.lang.Integer requestId, java.lang.Integer protocolType, java.lang.Boolean isError, java.nio.ByteBuffer response) {
    this.requestId = requestId;
    this.protocolType = protocolType;
    this.isError = isError;
    this.response = response;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return requestId;
    case 1: return protocolType;
    case 2: return isError;
    case 3: return response;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: requestId = (java.lang.Integer)value$; break;
    case 1: protocolType = (java.lang.Integer)value$; break;
    case 2: isError = (java.lang.Boolean)value$; break;
    case 3: response = (java.nio.ByteBuffer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'requestId' field.
   */
  public java.lang.Integer getRequestId() {
    return requestId;
  }

  /**
   * Sets the value of the 'requestId' field.
   * @param value the value to set.
   */
  public void setRequestId(java.lang.Integer value) {
    this.requestId = value;
  }

  /**
   * Gets the value of the 'protocolType' field.
   */
  public java.lang.Integer getProtocolType() {
    return protocolType;
  }

  /**
   * Sets the value of the 'protocolType' field.
   * @param value the value to set.
   */
  public void setProtocolType(java.lang.Integer value) {
    this.protocolType = value;
  }

  /**
   * Gets the value of the 'isError' field.
   */
  public java.lang.Boolean getIsError() {
    return isError;
  }

  /**
   * Sets the value of the 'isError' field.
   * @param value the value to set.
   */
  public void setIsError(java.lang.Boolean value) {
    this.isError = value;
  }

  /**
   * Gets the value of the 'response' field.
   */
  public java.nio.ByteBuffer getResponse() {
    return response;
  }

  /**
   * Sets the value of the 'response' field.
   * @param value the value to set.
   */
  public void setResponse(java.nio.ByteBuffer value) {
    this.response = value;
  }

  /** Creates a new HandshakeResponse RecordBuilder */
  public static code.core.npc.rpc.HandshakeResponse.Builder newBuilder() {
    return new code.core.npc.rpc.HandshakeResponse.Builder();
  }
  
  /** Creates a new HandshakeResponse RecordBuilder by copying an existing Builder */
  public static code.core.npc.rpc.HandshakeResponse.Builder newBuilder(code.core.npc.rpc.HandshakeResponse.Builder other) {
    return new code.core.npc.rpc.HandshakeResponse.Builder(other);
  }
  
  /** Creates a new HandshakeResponse RecordBuilder by copying an existing HandshakeResponse instance */
  public static code.core.npc.rpc.HandshakeResponse.Builder newBuilder(code.core.npc.rpc.HandshakeResponse other) {
    return new code.core.npc.rpc.HandshakeResponse.Builder(other);
  }
  
  /**
   * RecordBuilder for HandshakeResponse instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<HandshakeResponse>
    implements org.apache.avro.data.RecordBuilder<HandshakeResponse> {

    private int requestId;
    private int protocolType;
    private boolean isError;
    private java.nio.ByteBuffer response;

    /** Creates a new Builder */
    private Builder() {
      super(code.core.npc.rpc.HandshakeResponse.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(code.core.npc.rpc.HandshakeResponse.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.requestId)) {
        this.requestId = data().deepCopy(fields()[0].schema(), other.requestId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.protocolType)) {
        this.protocolType = data().deepCopy(fields()[1].schema(), other.protocolType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.isError)) {
        this.isError = data().deepCopy(fields()[2].schema(), other.isError);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.response)) {
        this.response = data().deepCopy(fields()[3].schema(), other.response);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing HandshakeResponse instance */
    private Builder(code.core.npc.rpc.HandshakeResponse other) {
            super(code.core.npc.rpc.HandshakeResponse.SCHEMA$);
      if (isValidValue(fields()[0], other.requestId)) {
        this.requestId = data().deepCopy(fields()[0].schema(), other.requestId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.protocolType)) {
        this.protocolType = data().deepCopy(fields()[1].schema(), other.protocolType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.isError)) {
        this.isError = data().deepCopy(fields()[2].schema(), other.isError);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.response)) {
        this.response = data().deepCopy(fields()[3].schema(), other.response);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'requestId' field */
    public java.lang.Integer getRequestId() {
      return requestId;
    }
    
    /** Sets the value of the 'requestId' field */
    public code.core.npc.rpc.HandshakeResponse.Builder setRequestId(int value) {
      validate(fields()[0], value);
      this.requestId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'requestId' field has been set */
    public boolean hasRequestId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'requestId' field */
    public code.core.npc.rpc.HandshakeResponse.Builder clearRequestId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'protocolType' field */
    public java.lang.Integer getProtocolType() {
      return protocolType;
    }
    
    /** Sets the value of the 'protocolType' field */
    public code.core.npc.rpc.HandshakeResponse.Builder setProtocolType(int value) {
      validate(fields()[1], value);
      this.protocolType = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'protocolType' field has been set */
    public boolean hasProtocolType() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'protocolType' field */
    public code.core.npc.rpc.HandshakeResponse.Builder clearProtocolType() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'isError' field */
    public java.lang.Boolean getIsError() {
      return isError;
    }
    
    /** Sets the value of the 'isError' field */
    public code.core.npc.rpc.HandshakeResponse.Builder setIsError(boolean value) {
      validate(fields()[2], value);
      this.isError = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'isError' field has been set */
    public boolean hasIsError() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'isError' field */
    public code.core.npc.rpc.HandshakeResponse.Builder clearIsError() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'response' field */
    public java.nio.ByteBuffer getResponse() {
      return response;
    }
    
    /** Sets the value of the 'response' field */
    public code.core.npc.rpc.HandshakeResponse.Builder setResponse(java.nio.ByteBuffer value) {
      validate(fields()[3], value);
      this.response = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'response' field has been set */
    public boolean hasResponse() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'response' field */
    public code.core.npc.rpc.HandshakeResponse.Builder clearResponse() {
      response = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public HandshakeResponse build() {
      try {
        HandshakeResponse record = new HandshakeResponse();
        record.requestId = fieldSetFlags()[0] ? this.requestId : (java.lang.Integer) defaultValue(fields()[0]);
        record.protocolType = fieldSetFlags()[1] ? this.protocolType : (java.lang.Integer) defaultValue(fields()[1]);
        record.isError = fieldSetFlags()[2] ? this.isError : (java.lang.Boolean) defaultValue(fields()[2]);
        record.response = fieldSetFlags()[3] ? this.response : (java.nio.ByteBuffer) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}